
(( Comments ))

line_comment: "/" #"" *[!newline any]
block_comment: "((" #"" *[!"))" any] "))"
comment: line_comment | block_comment

(( General ))

_: *[whitespace | comment]
/ "whitespace no newline"
_nn: *[!newline whitespace | comment]

identifier: +[alphanum | "_"]
escape_char: "\\"

(( Program ))

program: definitions={ *[_ &definition] } _
definition: id=identifier _ ":" _ body=body

sequence: contents={ &expression +[_nn &expression] }
choice: ?["|" _] contents={ &choice_term +[_ "|" _ &choice_term] } ?[_ "|"]
choice_term: sequence | expression

body:
    | choice
    | sequence
    | expression

(( Expressions ))

reference: id=identifier

maybe_escaped_char:
    | !escape_char any
    | escape_char <\\trclabe'"\>>
    | escape_char "x" hex_char hex_char
hex_char: <abcdefABCDEF> | digit

double_quote_literal: '"' $*double_quote_literal_char '"'
double_quote_literal_char: escape_char '"' | !'"' maybe_escaped_char
single_quote_literal: "'" $*single_quote_literal_char "'"
single_quote_literal_char: escape_char "'" | !"'" maybe_escaped_char
literal: text=[ double_quote_literal | single_quote_literal ]

set: "<" charset=*set_char ">"
set_char: escape_char ">" | !">" maybe_escaped_char
optional: "?" inner=expression
oneplus: "+" inner=expression
zeroplus: "*" inner=expression
guard: "!" inner=expression
result: "#" inner=expression
adjoinment: "$" inner=expression
property: name=identifier "=" inner=expression
extension: "&" inner=expression
brackets: "[" _ body=body _ "]"
lambda: "{" _ body=body _ "}"

expression:
    | property
    | reference
    | literal
    | set
    | optional
    | oneplus
    | zeroplus
    | guard
    | result
    | adjoinment
    | extension
    | brackets
    | lambda
