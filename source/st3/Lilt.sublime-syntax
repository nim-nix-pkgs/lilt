%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - lilt
scope: source
contexts:
  main:
    - match: '/'
      scope: punctuation.definition.comment
      push: line_comment

    - match: '\(\('
      scope: punctuation.definition.comment
      push: block_comment

    # Rule definition
    - match: '[a-zA-Z_]+(?=:)'
      scope: entity.name.function
      push: rule_definition

  rule_definition:
    - meta_scope: meta.function

    - match: '"'
      scope: string.quoted.double
      push: double_quoted_string

    - match: "'"
      scope: string.quoted.single
      push: single_quoted_string

    - match: "<"
      scope: string.quoted.other
      push: set

    # Pop at another rule definition
    - match: '(?=[a-zA-Z_]+:)'
      pop: true

    - match: '/'
      scope: punctuation.definition.comment
      push: line_comment

    - match: '\(\('
      scope: punctuation.definition.comment
      push: block_comment

    # We consider the left side of `=` to be a "parameter" to `=`
    - match: '[a-zA-Z_]+(?=\=)'
      scope: variable.parameter

    - match: '[a-zA-Z_]+'
      scope: variable

    - match: '(&|\*|\+|\$|=|!|\?|#)'
      scope: keyword.operator

    - match: '(:|\|)'
      scope: punctuation.separator

    - match: '\{'
      scope: punctuation.section.braces.begin
      push: [lambda, rule_definition]

    - match: '(?=\})'
      pop: true

    - match: '\['
      scope: punctuation.section.brackets.begin
      push: [brackets, rule_definition]

    - match: '(?=\])'
      pop: true

  lambda:
    - meta_scope: meta.braces
    - match: '\}'
      scope: punctuation.section.braces.end
      pop: true

  brackets:
    - meta_scope: meta.brackets
    - match: '\]'
      scope: punctuation.section.brackets.end
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double
    - match: '(\\x[a-fA-F0-9]{2}|\\.)'
      scope: constant.character.escape
    - match: '"'
      scope: string.quoted.double
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single
    - match: '(\\x[a-fA-F0-9]{2}|\\.)'
      scope: constant.character.escape
    - match: "'"
      scope: string.quoted.single
      pop: true

  set:
    - meta_scope: string.quoted.other
    - match: '(\\x[a-fA-F0-9]{2}|\\.)'
      scope: constant.character.escape
    - match: ">"
      scope: string.quoted.other
      pop: true

  line_comment:
    - meta_scope: comment.line
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block
    - match: '\)\)'
      pop: true

    # Account for nested comments
    - match: '\(\('
      push: block_comment
